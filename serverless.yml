# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: cake-ordering-system
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

plugins:
  - serverless-pseudo-parameters

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x

# you can overwrite defaults here
  stage: dev
  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
      Resource:
        - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/ordersTable
    - Effect: Allow
      Action:
        - kinesis:putRecord
      Resource:
        - arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/order-events
    - Effect: Allow
      Action:
        - ses:SendEmail
      Resource:
        - "*"
      Condition:
        StringEquals:
          ses:FromAddress:
            - cakeorderingsystem@sharklasers.com
    - Effect: Allow
      Action:
        - sqs:SendMessage
      Resource:
        - arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:deliveryServiceQueue
        - arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:customerServiceQueue

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: /hello
          method: get

  createOrder:
    handler: handler.createOrder
    events:
      - http:
          path: /order
          method: post
    environment:
      orderTableName: ordersTable
      orderStreamName: order-events
  orderFulfillment:
    handler: handler.orderFulfillment
    events:
      - http:
          path: /order/fulfill
          method: post
    environment:
      orderTableName: ordersTable
      orderStreamName: order-events
  notifyExternalParties:
    handler: handler.notifyExternalParties
    events:
      - stream:
          arn: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/order-events
    environment:
      # The following format is self assign varriables --> ${self.provider.region}
      sesRegion: us-east-1
      cakeProducerEmail: cakeproducer@sharklasers.com
      cakeOrderingSystemEmail: cakeorderingsystem@sharklasers.com
      deliveyCompanyQueue:
        Ref: deliveryServiceQueue
      orderTableName: ordersTable
  notifyDeliveryCompany:
    handler: handler.notifyDeliveryCompany
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - deliveryServiceQueue
              - Arn
          batchSize: 1
  orderDelivered:
    handler: handler.orderDelivered
    events:
      - http:
          path: /order/delivered
          method: post
    environment:
      orderTableName: orderTable
      sqsRegion: us-east-1
      customerServiceQueue:
        Ref: customerServiceQueue
  notifyCustomerService:
    handler: handler.notifyCustomerService
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - customerServiceQueue
              - Arn
          batchSize: 1

# you can add CloudFormation resource templates here
resources:
  Resources:
    # Cloud formation name for our AWS Kinesis data stream
    OrderEventsStream:
      # Type of cloud object
      Type: AWS::Kinesis::Stream
      # Properties of object
      Properties:
        Name: order-events
        ShardCount: 1
    # Create a Dynamodb
    orderTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ordersTable
        AttributeDefinitions:
          - AttributeName: orderId
            AttributeType: S
        KeySchema:
          - AttributeName: orderId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    deliveryServiceQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: deliveryServiceQueue
    customerServiceQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: customerServiceQueue